package com.FinalGame.flixelgame;

import org.flixel.FlxG;
import org.flixel.FlxGroup;
import org.flixel.FlxObject;
import org.flixel.FlxSprite;
import org.flixel.FlxState;
import org.flixel.event.IFlxCollision;

import Enemies.Dog;
import Enemies.Enemy;
import Entities.Floor;
import Misc.DamageNumber;
import Misc.HeartsCounter;
import Misc.Timer;
import PlayerPackage.Player;
import Projectiles.Bullet;
import Projectiles.PistolBullet;
import Projectiles.SwordBullet;
import Weapons.Pistol;
import Weapons.Sword;

public class PlayState extends FlxState {
	/**
	 * GROUPS
	 */
	public FlxGroup movingEntityGroup;
	public FlxGroup solidEntityGroup;
	public FlxGroup miscEntityGroup; // Collides with the floor but not with
										// anything else
	public FlxGroup playerBulletGroup; // Anything that can damage any other
										// enemy
	public FlxGroup enemyGroup;

	/**
	 * MISC ENTITIES
	 */
	public Player player;
	public HeartsCounter heartsCounter;
	/**
	 * MISC VARIABLES
	 */
	public int playerMoveDirection = 0;
	public static final int MOVING_RIGHT = 1;
	public static final int MOVING_LEFT = 2;
	public static final int NOT_MOVING = 0;

	@Override
	public void create() {
		FlxG.setBgColor(0xFF927D99);

		solidEntityGroup = new FlxGroup();
		miscEntityGroup = new FlxGroup();
		playerBulletGroup = new FlxGroup();
		enemyGroup = new FlxGroup();
		movingEntityGroup = new FlxGroup();

		// Need to add heartsGroup every time a heart is added
		heartsCounter = new HeartsCounter(10, 10, 10);
		add(heartsCounter.heartGroup);

		createDog(100, 200);
		// createWeapon(300, 200);
		createPlayer(100, 100);
		createFloor(0, FlxG.height - 100, FlxG.width, 100);

	}

	@Override
	public void update() {
		super.update();

		FlxG.overlap(player, enemyGroup, new IFlxCollision() {

			@Override
			public void callback(FlxObject thisPlayer, FlxObject thisEnemy) {
				if (thisEnemy instanceof Dog) {
					Dog dog = Dog.class.cast(thisEnemy);
					if (dog.canDamage) {
						canDamage = false;
						dog.onJumpAttack = false;
						heartsCounter.damage(dog.dealDamage());
						dog.stopAction();
						//Pauses the dog in the same place for 1 second
						dog.standStill(1 * Timer.FRAMES_TO_SECONDS);
					}
				}
			}

		});

		// FlxG.collide(player, enemyGroup);
		FlxG.overlap(playerBulletGroup, enemyGroup, new IFlxCollision() {

			@Override
			public void callback(FlxObject thisBullet, FlxObject enemyCopy) {

				Bullet bullet = Bullet.class.cast(thisBullet);
				Enemy enemy = Enemy.class.cast(enemyCopy);

				int damage = bullet.getDamage();
				enemy.hit(damage);

				if (bullet.velocity.x < 0) {
					createDamageNumber((int) (bullet.x) - (int) bullet.width
							* 2, (int) (bullet.y - 5), damage);
				} else {
					createDamageNumber((int) (bullet.x), (int) (bullet.y - 5),
							damage);
				}

				bullet.kill();

			}
		});

		FlxG.collide(enemyGroup, solidEntityGroup);
		FlxG.collide(miscEntityGroup, solidEntityGroup);
		FlxG.collide(player, solidEntityGroup, new IFlxCollision() {

			@Override
			public void callback(FlxObject playerCopy, FlxObject solidEntity) {

				if (playerCopy.isTouching(FlxSprite.DOWN)) {
					player.canJump = true;
				}
			}
		});

		/**
		 * Everything else
		 */

		// Keypress needs to be after collision detection
		keyPress();
		checkAttacking();

		// Sets the player's animation position
		player.setAnimationPosition();

	}

	/**
	 * KEYPRESSES
	 */

	public void keyPress() {
		/**
		 * MOVEMENT STUFF
		 */
		player.velocity.x = 0;

		// The player is immobile when he is attacking, but can move when he is
		// attacking in the air. Only lets the player
		// move when he is not attacking when on the ground;

		// If both keys are not pressed
		if (!(FlxG.keys.pressed("A") || FlxG.keys.pressed("LEFT"))
				&& !(FlxG.keys.pressed("D") || FlxG.keys.pressed("RIGHT"))) {
			playerMoveDirection = NOT_MOVING;
		}

		if (FlxG.keys.pressed("D") || FlxG.keys.pressed("RIGHT")) {
			playerMoveDirection = MOVING_RIGHT;
		}

		if (FlxG.keys.pressed("A") || FlxG.keys.pressed("LEFT")) {
			playerMoveDirection = MOVING_LEFT;
		}

		if (FlxG.keys.justPressed("D") || FlxG.keys.justPressed("RIGHT")) {
			playerMoveDirection = MOVING_RIGHT;
		}

		if (FlxG.keys.justPressed("A") || FlxG.keys.justPressed("LEFT")) {
			playerMoveDirection = MOVING_LEFT;
		}

		if (playerMoveDirection == MOVING_LEFT) {
			player.velocity.x = -player.speed;
		}

		if (playerMoveDirection == MOVING_RIGHT) {
			player.velocity.x = player.speed;
		}

		if ((FlxG.keys.justPressed("W") || FlxG.keys.justPressed("UP"))
				&& player.canJump) {
			player.velocity.y = -player.playerJumpSpeed;
			player.canJump = false;
			player.jump();
		}

		/**
		 * ATTACKING STUFF
		 */
		if (FlxG.keys.pressed("SPACE")) {

			if (player.holdingWeapon.canAttack) {

				player.holdingWeapon.attack();

				// THEN DO ALL THE ATTACKS HERE
				if (player.holdingWeapon instanceof Sword) {

					player.attack();

					if (player.getFacing() == FlxSprite.RIGHT) {
						createSwordBullet((int) player.x + 32 - 10,
								(int) player.y,
								player.holdingWeapon.dealDamage());
					} else if (player.getFacing() == FlxSprite.LEFT) {
						createSwordBullet((int) player.x - 32 + 10,
								(int) player.y,
								player.holdingWeapon.dealDamage());
					}
				}

				if (player.holdingWeapon instanceof Pistol) {
					player.attack();

					if (player.getFacing() == FlxSprite.RIGHT) {
						createPistolBullet((int) player.x + 16,
								(int) player.y + 7,
								player.holdingWeapon.dealDamage(),
								player.getFacing());
					} else if (player.getFacing() == FlxSprite.LEFT) {
						createPistolBullet((int) player.x - 16,
								(int) player.y + 7,
								player.holdingWeapon.dealDamage(),
								player.getFacing());
					}

				}

			}

		}

		/**
		 * Dev checking stuff
		 */

		if (FlxG.keys.justPressed("R")) {
			heartsCounter.damage(1);
		}

		if (FlxG.keys.justPressed("T")) {
			heartsCounter.addHeart(1);
		}

	}

	/**
	 * Checks whether or not the player is attacking 1. Checks if the player's
	 * weapon is attacking 2. Fires the bullet corresponding with that weapon
	 * 
	 * Essentially handles the whole attacking process after is sees that the
	 * holdingWeapon is attacking in that frame
	 * 
	 */
	public void checkAttacking() {
		if (player.holdingWeapon.meleeAttacking) {

			// Checks for each weapon and does something different for each
			if (player.holdingWeapon instanceof Sword) {

				if (player.getFacing() == FlxSprite.RIGHT) {
					createSwordBullet((int) player.x + 32 - 10, (int) player.y,
							player.holdingWeapon.dealDamage());
				} else if (player.getFacing() == FlxSprite.LEFT) {
					createSwordBullet((int) player.x - 32 + 10, (int) player.y,
							player.holdingWeapon.dealDamage());
				}
			}

		}
	}

	/**
	 * ALL CREATE STATEMENTS GO UNDER HERE
	 */
	public void createPlayer(int x, int y) {
		player = new Player(x, y);
		add(player);

		// Camera for the player
		FlxG.camera.follow(player);

		// Important, adds the player animation sprite;
		add(player.playerAnimationSprite);

		// Important, adds the player's first weapon
		add(player.holdingWeapon);
		player.holdingWeapon.equipped = true;

	}

	public void createFloor(int x, int y, int width, int height) {
		Floor floor = new Floor(x, y, width, height);
		solidEntityGroup.add(floor);
		add(floor);
	}

	public void createDog(int x, int y) {
		Dog dog = new Dog(x, y);
		enemyGroup.add(dog);
		add(dog);
	}

	public void createDamageNumber(int x, int y, int number) {
		DamageNumber dn = new DamageNumber(x, y, number);
		add(dn);
	}

	public void createSwordBullet(int x, int y, int damage) {
		SwordBullet swordBullet = new SwordBullet(x, y, damage);
		playerBulletGroup.add(swordBullet);
		add(swordBullet);
	}

	public void createPistolBullet(int x, int y, int damage, int direction) {
		PistolBullet pistolBullet = new PistolBullet(x, y, damage, direction);
		playerBulletGroup.add(pistolBullet);
		add(pistolBullet);
	}

}